// Code generated by go generate; DO NOT EDIT.

package tree

import (
	"time"

	"g.rg-s.com/sacer/go/entry"
	"g.rg-s.com/sacer/go/entry/file"
	"g.rg-s.com/sacer/go/entry/info"
	"g.rg-s.com/sacer/go/entry/tools"
)

func (e *Tree) Type() string {
	return "tree"
}

func (e *Tree) Parent() entry.Entry {
	return e.parent
}

func (e *Tree) File() *file.File {
	return e.file
}

func (e *Tree) Id() int64 {
	return e.date.Unix()
}

func (e *Tree) Timestamp() string {
	return e.date.Format(tools.Timestamp)
}

func (e *Tree) Hash() string {
	return tools.ToB16(e.date)
}

func (e *Tree) HashShort() string {
	return tools.ShortenHash(e.Hash())
}

func (e *Tree) Date() time.Time {
	return e.date
}

func (e *Tree) Info() info.Info {
	return e.info
}

func (e *Tree) Title(lang string) string {
	if title := e.info.Title(lang); title != "" {
		return title
	}
	return e.HashShort()
}

func (e *Tree) Slug(lang string) string {
	if slug := e.info.Slug(lang); slug != "" {
		return slug
	}
	return tools.Normalize(e.info.Title(lang))
}

func (e *Tree) MediaObject() bool {
	return e.Type() != "audio" && entry.IsBlob(e)
}

func (e *Tree) ObjectType() string {
	if e.MediaObject() {
		return "mob"
	}
	return "tob"
}

func (e *Tree) SetParent(parent entry.Entry) {
	e.parent = parent
}

func (e *Tree) SetInfo(inf info.Info) {
	e.info = inf
}

func (e *Tree) Entries() entry.Entries {
	return e.entries
}
